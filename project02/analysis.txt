{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 The profiling of selection sort shows that it performs significantly worse than quick sort. This is because the complexity of selection sort can be described as O(n^2) since every item must be compared to every other non sorted item. i.e (n-1 + n- 2 + n-3\'85. + 1).\
Quick sort is much faster than selection sort because of the way it partitions the list of items. Since it must iterate through all items, we start with a complexity of O(n). This can be multiplied by log(n) since the list will be partitioned log(n) times.\
\
For the Fibonacci functions, fib1 runs significantly slower than fib2 according to the profiles. fib1 has exponential time with a complexity of O(k^n) where k must be somewhere between 1 and 2. This is because each call splits into two more calls, thus the number of calls will increase exponentially.\
\
For fib2, the run time is O(n) since previously calculated values are stored in a cache, so they do not have to be recalculated. Since only unique values need to be calculated, program will run close to n times. \
\
}